rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMember(householdId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/households/$(householdId)) &&
             get(/databases/$(database)/documents/households/$(householdId)).data.members[request.auth.uid] != null;
    }
    
    function canEdit(householdId) {
      let household = get(/databases/$(database)/documents/households/$(householdId)).data;
      let member = household.members[request.auth.uid];
      return member != null && (member.role == 'owner' || member.role == 'admin' || member.role == 'editor');
    }
    
    function canAdmin(householdId) {
      let household = get(/databases/$(database)/documents/households/$(householdId)).data;
      let member = household.members[request.auth.uid];
      return member != null && (member.role == 'owner' || member.role == 'admin');
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Households collection
    match /households/{householdId} {
      allow read: if isMember(householdId);
      allow create: if isAuthenticated();
      allow update: if canAdmin(householdId);
      allow delete: if canAdmin(householdId);
      
      // Items subcollection
      match /items/{itemId} {
        allow read: if isMember(householdId);
        allow create: if canEdit(householdId);
        allow update: if canEdit(householdId);
        allow delete: if canEdit(householdId);
      }
      
      // Locations subcollection
      match /locations/{locationId} {
        allow read: if isMember(householdId);
        allow create: if canEdit(householdId);
        allow update: if canEdit(householdId);
        allow delete: if canEdit(householdId);
      }
      
      // Categories subcollection
      match /categories/{categoryId} {
        allow read: if isMember(householdId);
        allow create: if canEdit(householdId);
        allow update: if canEdit(householdId);
        allow delete: if canEdit(householdId);
      }
      
      // Projects subcollection
      match /projects/{projectId} {
        allow read: if isMember(householdId);
        allow create: if canEdit(householdId);
        allow update: if canEdit(householdId);
        allow delete: if canEdit(householdId);
      }
      
      // Loans subcollection
      match /loans/{loanId} {
        allow read: if isMember(householdId);
        allow create: if canEdit(householdId);
        allow update: if canEdit(householdId);
        allow delete: if canEdit(householdId);
      }
      
      // Analytics subcollection
      match /analytics/{docId} {
        allow read: if isMember(householdId);
        allow write: if false; // Only Cloud Functions can write
      }
    }
    
    // Invitations collection
    match /invitations/{token} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Shares collection (public access)
    match /shares/{shareId} {
      allow read: if true; // Public read for guest access
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if resource.data.createdBy == request.auth.uid;
    }
    
    // Product database (community contributed)
    match /productDatabase/{barcode} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
    }
  }
}
